{"version":3,"sources":["./src/app/service/funcionario.service.ts","./src/environments/environment.ts","./src/app/funcionario-edit/funcionario-edit.component.ts","./src/app/funcionario-edit/funcionario-edit.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/setor/setor-get/setor-get.component.ts","./src/app/setor/setor-get/setor-get.component.html","./src/app/app.module.ts","./src/app/service/setor.service.ts","./src/app/funcionario-get/funcionario-get.component.ts","./src/app/funcionario-get/funcionario-get.component.html","./src/app/app-routing.module.ts","./src/app/setor/setor-add/setor-add.component.ts","./src/app/setor/setor-add/setor-add.component.html","./src/app/setor/setor-edit/setor-edit.component.ts","./src/app/setor/setor-edit/setor-edit.component.html","./src/app/funcionario-add/funcionario-add.component.ts","./src/app/funcionario-add/funcionario-add.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/**\n * arquivo: app/service/funcionario\n * descrição: arquivo responsável por realizar as transições de request ('Funcionario')\n * author: Maxsuel Oliveira <github: maxsuelo53>\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport Funcionario from '../interface/Funcionario';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FuncionarioService {\n\n  uri = 'https://app-empresa-topicos-avancados.herokuapp.com';\n\n  constructor(private http: HttpClient) { }\n\n  createNewFuncionario(nome: string, cargo: string, salario: number, data_nascimento: Date, registro_funcionario: number){\n    const funcionario = {nome, cargo, salario, data_nascimento, registro_funcionario };\n    console.log(funcionario);\n\n    //==> (POST - URL no back-end): http//localhost:300/funcionario\n    this.\n      http.\n        post( `${this.uri}/funcionario`, funcionario).subscribe(res => console.log('Feito'));\n  }\n\n  /**\n   * Método responsável por listar todos os 'Funcionarios'\n   */\n\n  getFuncionarios(): Observable<Funcionario[]>{\n    //==> (GET - URL no Back-End): http://localhost:3000/funcionario\n    return this\n      .http\n      .get<Funcionario[]>(`${this.uri}/funcionario`);\n  }\n\n  /**\n   * Método responsável por editar um 'Funcionario'\n   */\n\n  editFuncionario(id: any){\n    //==> (PUT - URL no Back-End): http://localhost:3000/funcionario:id\n    return this\n    .http\n    .get(`${this.uri}/funcionario/${id}`);\n  }\n\n  /**\n   * Método responsável pela ação do botão Update no arquivo 'funcionario-edit.component.html'\n   */\n  updateFuncionario(nome: any, cargo: any, salario: any, data_nascimento: any, registro_funcionario: any, id:any){\n    const funcionario ={\n      nome,\n      cargo,\n      salario,\n      data_nascimento,\n      registro_funcionario\n    };\n\n    this\n      .http\n      .put(`${this.uri}/funcionario/${id}`,funcionario)\n      .subscribe(res => console.log('Done!'));\n  }\n\n  /**\n   * Método para excluir um Funcionario pelo Id\n   */\n  deleteFuncionario(id:any){\n    //==> (DELETE - URL no Back-End): http://localhost:3000/funcionario:id\n    return this\n    .http\n    .delete(`${this.uri}/funcionario/${id}`);\n  }\n\n  \n  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router} from '@angular/router';\nimport { FuncionarioService } from '../service/funcionario.service';\n\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-funcionario-edit',\n  templateUrl: './funcionario-edit.component.html',\n  styleUrls: ['./funcionario-edit.component.css']\n})\nexport class FuncionarioEditComponent implements OnInit {\n\n  funcionarioForm!: FormGroup;\n  funcionario: any = {};\n\n  constructor(private route:ActivatedRoute, \n              private router:Router, \n              private funcionarioService: FuncionarioService,\n              private formBuilder: FormBuilder) { \n\n                this.createForm();\n  }\n\n  /*Método responsável por criar um formulário ao entrar na página de Atualizar Funcionario(a)*/\n  createForm(){\n    this.funcionarioForm = this.formBuilder.group({      \n      nome: ['',Validators.required],\n      cargo: ['',Validators.required],\n      salario: ['',Validators.required],\n      data_nascimento: ['',Validators.required],\n      registro_funcionario: ['',Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.funcionarioService.editFuncionario(params.id).subscribe( res =>{\n        this.funcionario = res;\n\n        this.funcionarioForm.setValue({\n          nome: this.funcionario.nome,\n          cargo: this.funcionario.cargo,\n          salario: this.funcionario.salario,\n          data_nascimento: this.funcionario.data_nascimento,\n          registro_funcionario: this.funcionario.registro_funcionario\n        });\n      });\n    });\n  }\n\n  /**\n   * Método responsável por Atualizar o 'funcionario' por ID através do botao 'Update'\n   */\n  updateFuncionario(nome: any, cargo: any, salario: any, data_nascimento: any, registro_funcionario: any){\n    this.route.params.subscribe(params =>{\n      this.funcionarioService.updateFuncionario(nome,cargo,salario,data_nascimento,registro_funcionario,params.id);\n\n      this.router.navigate(['funcionario/create']);\n      \n      Swal.fire({\n        title: 'Funcionario atualizado com sucesso!',\n        icon: 'success',\n        showConfirmButton: true,\n        timer: 1500\n\n      });\n\n    });\n\n  }\n\n\n}\n","<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <form [formGroup] = \"funcionarioForm\" novalidate>\r\n            \r\n            <!-- BLOCO NOME DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"nome\" class=\"col-md-8\">Nome:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o nome do funcionario\" formControlName=\"nome\" #nome/>\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['nome'].invalid\r\n                    && (funcionarioForm.controls['nome'].dirty \r\n                    || funcionarioForm.controls['nome'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['nome'].errors\">\r\n                        O campo 'Nome' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO NOME DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO CARGO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"cargo\" class=\"col-md-8\">Cargo:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o cargo do funcionario\" formControlName=\"cargo\" #cargo />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['cargo'].invalid\r\n                    && (funcionarioForm.controls['cargo'].dirty \r\n                    || funcionarioForm.controls['cargo'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['cargo'].errors\">\r\n                        O campo 'Cargo' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO CARGO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO SALARIO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"salario\" class=\"col-md-8\">Salario:</label>\r\n                <input type=\"number\" class=\"form-control\" placeholder=\"Digite o salário do funcionario\" formControlName=\"salario\" #salario />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['salario'].invalid\r\n                    && (funcionarioForm.controls['salario'].dirty \r\n                    || funcionarioForm.controls['salario'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['salario'].errors\">\r\n                        O campo 'Salario' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO SALARIO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO DATA DE NASCIMENTO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"data_nascimento\" class=\"col-md-8\">Data de Nascimento:</label>\r\n                <input type=\"date\" class=\"form-control\" placeholder=\"YYYY/MM/DD\" formControlName=\"data_nascimento\" #data_nascimento />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['data_nascimento'].invalid\r\n                    && (funcionarioForm.controls['data_nascimento'].dirty \r\n                    || funcionarioForm.controls['data_nascimento'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['data_nascimento'].errors\">\r\n                        O campo 'Data de Nascimento' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO DATA DE NASCIMENTO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO REGISTRO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"funcionario-registro\" class=\"col-md-8\">Registro do Funcionario:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o registro do funcionario\" formControlName=\"registro_funcionario\" #registro_funcionario />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['registro_funcionario'].invalid\r\n                    && (funcionarioForm.controls['registro_funcionario'].dirty \r\n                    || funcionarioForm.controls['registro_funcionario'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['registro_funcionario'].errors\">\r\n                        O campo 'Registro do Funcionario' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO REGISTRO DO FUNCIONARIO-->\r\n\r\n            <div class=\"form-group col-md-8\">\t\r\n                <button class=\"btn btn-primary\" (click)=\"updateFuncionario(nome.value ,cargo.value , salario.value, data_nascimento.value, registro_funcionario.value)\" \r\n                [disabled] = \"funcionarioForm.invalid\">Funcionario \r\n                </button>   \r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>","import { Component } from '@angular/core';\n\nimport { SlimLoadingBarService } from 'ng2-slim-loading-bar';\nimport {  NavigationCancel, Router,\n          Event,NavigationEnd,\n          NavigationError, NavigationStart,\n        } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'front';\n\n  /**\n   *\n   */\n  constructor(private slimLoadingBarService: SlimLoadingBarService, private router: Router) {\n    this.router.events.subscribe((event: Event)=>{\n      this.navigationInterceptor (event);\n    });\n  }\n\n  private navigationInterceptor(event: Event): void{\n    if (event instanceof NavigationStart){\n      this.slimLoadingBarService.start();\n    }\n    if (event instanceof NavigationEnd){\n      this.slimLoadingBarService.complete();\n    }\n    if (event instanceof NavigationCancel){\n      this.slimLoadingBarService.stop();\n    }\n    if (event instanceof NavigationError){\n      this.slimLoadingBarService.stop();\n    }\n\n  }\n}\n","<ng2-slim-loading-bar [color]=\"'black'\" [height]=\"'10px'\"></ng2-slim-loading-bar>\n\n<nav class=\"navbar navbar-expand-sm navbar-light bg-light\">\n  <div class=\"container-fluid\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\">\n        <a routerLink=\"funcionario/create\" class=\"nav-link\" routerLinkActive=\"active\">\n          Criar Funcionario\n        </a>\n      </li>\n      <li class=\"nav-item\">\n        <a routerLink=\"funcionario/lista\" class=\"nav-link\" routerLinkActive=\"active\">\n          Funcionarios\n        </a>\n      </li>\n      <li class=\"nav-item\">\n        <a routerLink=\"setor/create\" class=\"nav-link\" routerLinkActive=\"active\">\n          Criar Setor\n        </a>\n      </li>\n      <li class=\"nav-item\">\n        <a routerLink=\"setor/lista\" class=\"nav-link\" routerLinkActive=\"active\">\n          Setores\n        </a>\n      </li>\n    </ul>    \n  </div>\n</nav>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { Component, OnInit } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport Setor from '../../interface/Setor';\nimport { SetorService } from '../../service/setor.service';\nimport { ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-setor-get',\n  templateUrl: './setor-get.component.html',\n  styleUrls: ['./setor-get.component.css']\n})\nexport class SetorGetComponent implements OnInit {\n\n  setores: Setor[] = [];\n\n  constructor( private setorService: SetorService, private route:ActivatedRoute, \n    private router:Router) {}\n\n  ngOnInit(): void {\n    this.setorService\n      .getSetores()\n      .subscribe((data: Setor[])=> {\n        this.setores = data\n      });      \n  }\n\n    /**\n   * Método responsável por exlcuir um 'Setor' pelo Id\n   */\n\n     deleteSetor(id:any){\n      Swal.fire({\n        title: 'Deseja realmente excluir o setor?',\n        text: 'Atenção! Esse setor será deletado!',\n        icon: 'warning',\n        showCancelButton:true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Sim!'\n      }).then((result) =>{\n        if(result.value == true){\n          this.setorService.deleteSetor(id).subscribe();\n          const index = this.setores.indexOf(id);\n          Swal.fire({\n            text:'Setor deletado com sucesso!'\n          }).then((result) =>{\n            if(result.value == true){\n              location.reload();\n            }\n          });\n        }else if(result.dismiss == Swal.DismissReason.cancel){\n          Swal.fire(\n            \"Operação cancelada!\"\n          );\n        }\n      });\n    }\n\n}\n","<table class=\"table\">\n    <thead>\n        <tr>\n            <td class=\"text-center\">Nome</td>\n            <td class=\"text-center\">Local</td>\n            <td class=\"text-center\" colspan=\"2\"> Actions</td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let setor of setores\">\n            <td class=\"text-center\"> {{ setor.nome }}</td>\n            <td class=\"text-center\"> {{ setor.local }}</td>\n            <td>\n                <a [routerLink]=\"['/setor', setor.id_setor]\" routerLinkActive=\"router-link-active\" class=\"btn btn-success\">Editar</a>\n            </td>\n            <td>                \n                <button (click)=\"deleteSetor(setor.id_setor)\" class=\"btn btn-danger\">\n                    Delete\n                </button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { NgModule, LOCALE_ID  } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { SlimLoadingBarModule } from 'ng2-slim-loading-bar';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport ptBr from '@angular/common/locales/br';\nimport { registerLocaleData } from '@angular/common';\nimport { FuncionarioService } from './service/funcionario.service';\nimport { SetorService } from './service/setor.service';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FontAwesomeModule, FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { faEdit, faTrash, faUserPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport { FuncionarioAddComponent } from './funcionario-add/funcionario-add.component';\nimport { FuncionarioEditComponent } from './funcionario-edit/funcionario-edit.component';\nimport { FuncionarioGetComponent } from './funcionario-get/funcionario-get.component';\nimport { SetorAddComponent } from './setor/setor-add/setor-add.component';\nimport { SetorEditComponent } from './setor/setor-edit/setor-edit.component';\nimport { SetorGetComponent } from './setor/setor-get/setor-get.component';\n\n\nregisterLocaleData(ptBr, 'pt-BR');\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FuncionarioAddComponent,\n    FuncionarioEditComponent,\n    FuncionarioGetComponent,\n    SetorAddComponent,\n    SetorEditComponent,\n    SetorGetComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    SlimLoadingBarModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FontAwesomeModule\n  ],\n  providers: [\n    FuncionarioService,\n    SetorService,\n    {provide: LOCALE_ID, useValue: 'pt-BR'}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor( library: FaIconLibrary ){\n    library.addIcons(faEdit, faTrash,faUserPlus );\n  }\n }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport Setor from '../interface/Setor';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SetorService {\n\n  uri = 'https://app-empresa-topicos-avancados.herokuapp.com';\n\n  constructor(private http: HttpClient) { }\n\n  createNewSetor(nome: string, local:string){\n    const setor = {nome, local};\n    console.log(setor);\n\n    //==> (POST - URL no back-end): http//localhost:300/setor\n    this.\n      http.\n        post( `${this.uri}/setor`, setor).subscribe(res => console.log('Feito'));\n  }\n\n  /**\n   * Método responsável por listar todos os 'Setores'\n   */\n\n  getSetores(): Observable<Setor[]>{\n  //==> (GET - URL no Back-End): http://localhost:3000/setor\n  return this\n    .http\n    .get<Setor[]>(`${this.uri}/setor`);\n  }\n\n  /**\n   * Método responsável por editar um 'Setor'\n   */\n\n  editSetor(id: any){\n  //==> (PUT - URL no Back-End): http://localhost:3000/setor:id\n  return this\n  .http\n  .get(`${this.uri}/setor/${id}`);\n  }\n\n  /**\n   * Método responsável pela ação do botão Update no arquivo 'setor-edit.component.html'\n   */\n  updateSetor(nome: any, local: any, id:any){\n  const setor ={\n    nome,\n    local,\n  };\n\n  this\n    .http\n    .put(`${this.uri}/setor/${id}`,setor)\n    .subscribe(res => console.log('Done!'));\n  }\n  /**\n   * Método para excluir um Setor pelo Id\n   */\n    deleteSetor(id:any){\n    //==> (DELETE - URL no Back-End): http://localhost:3000/setor:id\n    return this\n    .http\n    .delete(`${this.uri}/setor/${id}`);\n  }\n}\n\n\n  \n","import { Component, OnInit } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport Funcionario from '../interface/Funcionario';\nimport { FuncionarioService } from '../service/funcionario.service';\nimport { ActivatedRoute, Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-funcionario-get',\n  templateUrl: './funcionario-get.component.html',\n  styleUrls: ['./funcionario-get.component.css']\n})\nexport class FuncionarioGetComponent implements OnInit {\n\n  funcionarios: Funcionario[] = [];\n\n  constructor( private funcionarioService: FuncionarioService, private route:ActivatedRoute, \n    private router:Router) {}\n\n  ngOnInit(): void {\n    this.funcionarioService\n      .getFuncionarios()\n      .subscribe((data: Funcionario[])=> {\n        this.funcionarios = data\n        console.log(data);\n      });  \n  }\n\n  /**\n   * Método responsável por exlcuir um 'Funcionario' pelo Id\n   */\n\n  deleteFuncionario(id:any){\n    Swal.fire({\n      title: 'Deseja realmente excluir o funcionario?',\n      text: 'Atenção! Esse funcionario será deletado!',\n      icon: 'warning',\n      showCancelButton:true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Sim!'\n    }).then((result) =>{\n      if(result.value == true){\n        this.funcionarioService.deleteFuncionario(id).subscribe();\n        const index = this.funcionarios.indexOf(id);\n        Swal.fire({\n          text:'Funcionario deletado com sucesso!'\n        }).then((result) =>{\n          if(result.value == true){\n            location.reload();\n          }\n        });\n      }else if(result.dismiss == Swal.DismissReason.cancel){\n        Swal.fire(\n          \"Operação cancelada com sucesso!\"\n        );\n      }\n    });\n  }\n\n}\n","<table class=\"table\">\n    <thead>\n        <tr>\n            <td class=\"text-center\">Nome</td>\n            <td class=\"text-center\">Cargo</td>\n            <td class=\"text-center\">Salário</td>\n            <td class=\"text-center\">Data de Nascimento</td>\n            <td class=\"text-center\">Registro de funcionario</td>\n            <td class=\"text-center\" colspan=\"2\"></td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let funcionario of funcionarios\">\n            <td class=\"text-center\"> {{ funcionario.nome }}</td>\n            <td class=\"text-center\"> {{ funcionario.cargo }}</td>\n            <td class=\"text-center\"> {{ funcionario.salario | currency:'BRL': 'symbol-narrow'}}</td>\n            <td class=\"text-center\"> {{ funcionario.data_nascimento }}</td>\n            <td class=\"text-center\"> {{ funcionario.registro_funcionario }}</td>\n            <td>\n                <a [routerLink]=\"['/funcionario', funcionario.id_funcionario]\" routerLinkActive=\"router-link-active\" class=\"btn btn-success\">Edit</a>\n              </td>\n              <td>                \n                <button (click)=\"deleteFuncionario(funcionario.id_funcionario)\" class=\"btn btn-danger\">\n                    Delete\n                </button>\n              </td>\n        </tr>\n    </tbody>\n</table>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { FuncionarioAddComponent } from './funcionario-add/funcionario-add.component';\nimport { FuncionarioGetComponent } from './funcionario-get/funcionario-get.component';\nimport { FuncionarioEditComponent } from './funcionario-edit/funcionario-edit.component';\nimport { SetorAddComponent } from './setor/setor-add/setor-add.component';\nimport { SetorEditComponent } from './setor/setor-edit/setor-edit.component';\nimport { SetorGetComponent } from './setor/setor-get/setor-get.component';\n\nconst routes: Routes = [\n  {path: 'funcionario/create', component: FuncionarioAddComponent},\n  {path: 'funcionario/lista', component: FuncionarioGetComponent},\n  {path: 'funcionario/:id', component: FuncionarioEditComponent},\n  {path: 'setor/create', component: SetorAddComponent},\n  {path: 'setor/lista', component: SetorGetComponent},\n  {path: 'setor/:id', component: SetorEditComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, ReactiveFormsModule  } from '@angular/forms';\nimport { SetorService } from '../../service/setor.service';\n\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-setor-add',\n  templateUrl: './setor-add.component.html',\n  styleUrls: ['./setor-add.component.css']\n})\nexport class SetorAddComponent implements OnInit {\n\n  setorForm!: FormGroup;\n\n  constructor( private formBuilder: FormBuilder, private setorService: SetorService) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.setorForm = this.formBuilder.group({\n      nome: ['',Validators.required],\n      local: ['',Validators.required]\n    });\n  }\n\n  createNewSetor(nome:any, local:any){\n    this.setorService.createNewSetor(nome,local)\n\n    Swal.fire({\n      title:'Setor adicionado com sucesso!',\n      icon: 'success',\n      timer: 1500,\n      showConfirmButton: true\n\n    });\n    this.setorForm.reset();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card d-flex justify-content-center\">\n    <div class=\"card-body\">\n        <form  [formGroup]=\"setorForm\">\n            <!-- BLOCO NOME DO SETOR -->\n            <div class=\"form-group col-md-8\">\n                <label for=\"nome\" class=\"col-md-8\">Nome:</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o nome do setor\" formControlName=\"nome\" #nome/>\n            </div>\n            <div *ngIf = \"setorForm.controls['nome'].invalid\n                    && (setorForm.controls['nome'].dirty \n                    || setorForm.controls['nome'].touched)\" \n                    class=\"alert alert-danger\">\n                    <div *ngIf = \"setorForm.controls['nome'].errors\">\n                        O campo 'Nome' é obrigatório!\n                    </div>\n            </div>\n            <!-- BLOCO NOME DO SETOR -->\n\n            <!-- BLOCO LOCAL DO SETOR -->\n            <div class=\"form-group col-md-8\">\n                <label for=\"local\" class=\"col-md-8\">Local:</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o local do setor\" formControlName=\"local\" #local />\n            </div>\n            <div *ngIf = \"setorForm.controls['local'].invalid\n                    && (setorForm.controls['local'].dirty \n                    || setorForm.controls['local'].touched)\" \n                    class=\"alert alert-danger\">\n                    <div *ngIf = \"setorForm.controls['local'].errors\">\n                        O campo 'Local' é obrigatório!\n                    </div>\n            </div>\n            <!-- BLOCO LOCAL DO SETOR-->\n\n            <div class=\"form-group col-md-8\">\t\n                <button class=\"btn btn-primary\" (click)=\"createNewSetor(nome.value ,local.value)\" \n                [disabled] = \"setorForm.pristine || setorForm.invalid\">Setor \n                </button>   \n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router} from '@angular/router';\nimport { SetorService } from '../../service/setor.service';\n\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-setor-edit',\n  templateUrl: './setor-edit.component.html',\n  styleUrls: ['./setor-edit.component.css']\n})\nexport class SetorEditComponent implements OnInit {\n\n  setorForm!: FormGroup;\n  setor: any = {};\n\n\n  constructor(private route:ActivatedRoute, \n              private router:Router, \n              private setorService: SetorService,\n              private formBuilder: FormBuilder) {\n                \n                this.createForm();\n  }\n\n  /*Método responsável por criar um formulário ao entrar na página de Atualizar Setor*/\n  createForm(){\n    this.setorForm = this.formBuilder.group({      \n      nome: ['',Validators.required],\n      local: ['',Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.setorService.editSetor(params.id).subscribe( res =>{\n        this.setor = res;\n\n        this.setorForm.setValue({\n          nome: this.setor.nome,\n          local: this.setor.local,\n        });\n      });\n    });\n  }\n\n  /**\n   * Método responsável por Atualizar o 'setor' por ID através do botao 'Update'\n   */\n   updateSetor(nome: any, local: any){\n    this.route.params.subscribe(params =>{\n      this.setorService.updateSetor(nome,local,params.id);\n\n      this.router.navigate(['setor/lista']);\n      \n      Swal.fire({\n        title: 'Setor atualizado com sucesso!',\n        icon: 'success',\n        showConfirmButton: true,\n        timer: 1500\n\n      });\n    });\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n        <form [formGroup] = \"setorForm\" novalidate>\n            \n            <!-- BLOCO NOME DO SETOR-->\n            <div class=\"form-group col-md-8\">\n                <label for=\"nome\" class=\"col-md-8\">Nome:</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o nome do setor\" formControlName=\"nome\" #nome/>\n            </div>\n            <div *ngIf = \"setorForm.controls['nome'].invalid\n                    && (setorForm.controls['nome'].dirty \n                    || setorForm.controls['nome'].touched)\" \n                    class=\"alert alert-danger\">\n                    <div *ngIf = \"setorForm.controls['nome'].errors\">\n                        O campo 'Nome' é obrigatório!\n                    </div>\n            </div>\n            <!-- BLOCO NOME DO SETOR-->\n\n            <!-- BLOCO LOCAL DO SETOR-->\n            <div class=\"form-group col-md-8\">\n                <label for=\"local\" class=\"col-md-8\">Local:</label>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o local do setor\" formControlName=\"local\" #local />\n            </div>\n            <div *ngIf = \"setorForm.controls['local'].invalid\n                    && (setorForm.controls['local'].dirty \n                    || setorForm.controls['local'].touched)\" \n                    class=\"alert alert-danger\">\n                    <div *ngIf = \"setorForm.controls['local'].errors\">\n                        O campo 'Local' é obrigatório!\n                    </div>\n            </div>\n            <!-- BLOCO LOCAL DO SETOR-->\n\n            <div class=\"form-group col-md-8\">\t\n                <button class=\"btn btn-primary\" (click)=\"updateSetor(nome.value ,local.value)\" \n                [disabled] = \"setorForm.invalid\">Atualizar Setor \n                </button>   \n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ReactiveFormsModule  } from '@angular/forms';\r\nimport { FuncionarioService } from '../service/funcionario.service';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-funcionario-add',\r\n  templateUrl: './funcionario-add.component.html',\r\n  styleUrls: ['./funcionario-add.component.css']\r\n})\r\nexport class FuncionarioAddComponent implements OnInit {\r\n\r\n  funcionarioForm!: FormGroup;\r\n\r\n  constructor( private formBuilder: FormBuilder, private funcionarioService: FuncionarioService) {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.funcionarioForm = this.formBuilder.group({\r\n      nome: ['',Validators.required],\r\n      cargo: ['',Validators.required],\r\n      salario: ['',Validators.required],\r\n      data_nascimento: ['',Validators.required],\r\n      registro_funcionario: ['',Validators.required]\r\n    });\r\n  }\r\n  /**\r\n   * Método responsável por adicionar novo 'Funcionario' --> \r\n   * @param nome \r\n   * @param cargo \r\n   * @param salario \r\n   * @param data_nascimento \r\n   * @param registro_funcionario \r\n   */\r\n  createNewFuncionario(nome: any, cargo: any, salario: any, data_nascimento: any, registro_funcionario: any)\r\n  {\r\n    this.funcionarioService.createNewFuncionario (nome, cargo, salario, data_nascimento, registro_funcionario)\r\n\r\n    Swal.fire({\r\n      title:'Funcionario adicionado com sucesso!',\r\n      icon: 'success',\r\n      timer: 1500,\r\n      showConfirmButton: true\r\n\r\n    });\r\n    this.funcionarioForm.reset();\r\n\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"card d-flex justify-content-center\">\r\n    <div class=\"card-body\">\r\n        <form  [formGroup]=\"funcionarioForm\">\r\n            <!-- BLOCO NOME DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"nome\" class=\"col-md-8\">Nome:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o nome do funcionario\" formControlName=\"nome\" #nome/>\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['nome'].invalid\r\n                    && (funcionarioForm.controls['nome'].dirty \r\n                    || funcionarioForm.controls['nome'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['nome'].errors\">\r\n                        O campo 'Nome' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO NOME DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO CARGO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"cargo\" class=\"col-md-8\">Cargo:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o cargo do funcionario\" formControlName=\"cargo\" #cargo />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['cargo'].invalid\r\n                    && (funcionarioForm.controls['cargo'].dirty \r\n                    || funcionarioForm.controls['cargo'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['cargo'].errors\">\r\n                        O campo 'Cargo' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO CARGO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO SALARIO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"salario\" class=\"col-md-8\">Salario:</label>\r\n                <input type=\"number\" class=\"form-control\" placeholder=\"Digite o salário do funcionario\" formControlName=\"salario\" #salario />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['salario'].invalid\r\n                    && (funcionarioForm.controls['salario'].dirty \r\n                    || funcionarioForm.controls['salario'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['salario'].errors\">\r\n                        O campo 'Salario' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO SALARIO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO DATA DE NASCIMENTO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"data_nascimento\" class=\"col-md-8\">Data de Nascimento:</label>\r\n                <input type=\"date\" class=\"form-control\" placeholder=\"YYYY/MM/DD\" formControlName=\"data_nascimento\" #data_nascimento />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['data_nascimento'].invalid\r\n                    && (funcionarioForm.controls['data_nascimento'].dirty \r\n                    || funcionarioForm.controls['data_nascimento'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['data_nascimento'].errors\">\r\n                        O campo 'Data de Nascimento' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO DATA DE NASCIMENTO DO FUNCIONARIO-->\r\n\r\n            <!-- BLOCO REGISTRO DO FUNCIONARIO-->\r\n            <div class=\"form-group col-md-8\">\r\n                <label for=\"funcionario-registro\" class=\"col-md-8\">Registro do Funcionario:</label>\r\n                <input type=\"text\" class=\"form-control\" placeholder=\"Digite o registro do funcionario\" formControlName=\"registro_funcionario\" #registro_funcionario />\r\n            </div>\r\n            <div *ngIf = \"funcionarioForm.controls['registro_funcionario'].invalid\r\n                    && (funcionarioForm.controls['registro_funcionario'].dirty \r\n                    || funcionarioForm.controls['registro_funcionario'].touched)\" \r\n                    class=\"alert alert-danger\">\r\n                    <div *ngIf = \"funcionarioForm.controls['registro_funcionario'].errors\">\r\n                        O campo 'Registro do Funcionario' é obrigatório!\r\n                    </div>\r\n            </div>\r\n            <!-- BLOCO REGISTRO DO FUNCIONARIO-->\r\n\r\n            <div class=\"form-group col-md-8\">\t\r\n                <button class=\"btn btn-primary\" (click)=\"createNewFuncionario(nome.value ,cargo.value , salario.value, data_nascimento.value, registro_funcionario.value)\" \r\n                [disabled] = \"funcionarioForm.pristine || funcionarioForm.invalid\">Funcionario \r\n                </button>   \r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}